[{"D:\\Portfolio\\MaxMMA\\frontend\\src\\index.js":"1","D:\\Portfolio\\MaxMMA\\frontend\\src\\App.js":"2","D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Header.js":"3","D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Footer.js":"4","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\HomeScreen.js":"5","D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Product.js":"6","D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Rating.js":"7","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\ProductScreen.js":"8","D:\\Portfolio\\MaxMMA\\frontend\\src\\store.js":"9","D:\\Portfolio\\MaxMMA\\frontend\\src\\reducers\\productReducers.js":"10","D:\\Portfolio\\MaxMMA\\frontend\\src\\constants\\productConstants.js":"11","D:\\Portfolio\\MaxMMA\\frontend\\src\\actions\\productActions.js":"12","D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Loader.js":"13","D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Message.js":"14","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\CartScreen.js":"15","D:\\Portfolio\\MaxMMA\\frontend\\src\\reducers\\cartReducers.js":"16","D:\\Portfolio\\MaxMMA\\frontend\\src\\constants\\cartConstants.js":"17","D:\\Portfolio\\MaxMMA\\frontend\\src\\actions\\cartActions.js":"18","D:\\Portfolio\\MaxMMA\\frontend\\src\\reducers\\userReducers.js":"19","D:\\Portfolio\\MaxMMA\\frontend\\src\\constants\\userConstants.js":"20","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\LoginScreen.js":"21","D:\\Portfolio\\MaxMMA\\frontend\\src\\actions\\userActions.js":"22","D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\FormContainer.js":"23","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\RegisterScreen.js":"24","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\ProfileScreen.js":"25","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\ShippingScreen.js":"26","D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\CheckoutSteps.js":"27","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\PaymentScreen.js":"28","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\PlaceOrderScreen.js":"29","D:\\Portfolio\\MaxMMA\\frontend\\src\\reducers\\orderReducers.js":"30","D:\\Portfolio\\MaxMMA\\frontend\\src\\constants\\orderConstants.js":"31","D:\\Portfolio\\MaxMMA\\frontend\\src\\actions\\orderActions.js":"32","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\OrderScreen.js":"33"},{"size":316,"mtime":1611463824278,"results":"34","hashOfConfig":"35"},{"size":1556,"mtime":1612105800320,"results":"36","hashOfConfig":"35"},{"size":1847,"mtime":1611770323047,"results":"37","hashOfConfig":"35"},{"size":337,"mtime":1611156433891,"results":"38","hashOfConfig":"35"},{"size":1127,"mtime":1612457512514,"results":"39","hashOfConfig":"35"},{"size":911,"mtime":1611472878250,"results":"40","hashOfConfig":"35"},{"size":1783,"mtime":1611326560322,"results":"41","hashOfConfig":"35"},{"size":4408,"mtime":1611473571211,"results":"42","hashOfConfig":"35"},{"size":1767,"mtime":1612366757434,"results":"43","hashOfConfig":"35"},{"size":1397,"mtime":1611472967012,"results":"44","hashOfConfig":"35"},{"size":370,"mtime":1611468368478,"results":"45","hashOfConfig":"35"},{"size":1276,"mtime":1611591644382,"results":"46","hashOfConfig":"35"},{"size":453,"mtime":1611467319324,"results":"47","hashOfConfig":"35"},{"size":333,"mtime":1611468283336,"results":"48","hashOfConfig":"35"},{"size":3632,"mtime":1612077798136,"results":"49","hashOfConfig":"35"},{"size":1280,"mtime":1612036429509,"results":"50","hashOfConfig":"35"},{"size":233,"mtime":1612030526087,"results":"51","hashOfConfig":"35"},{"size":1286,"mtime":1612035698457,"results":"52","hashOfConfig":"35"},{"size":2349,"mtime":1612371128410,"results":"53","hashOfConfig":"35"},{"size":836,"mtime":1612371174153,"results":"54","hashOfConfig":"35"},{"size":2240,"mtime":1611845114397,"results":"55","hashOfConfig":"35"},{"size":3672,"mtime":1612371241210,"results":"56","hashOfConfig":"35"},{"size":347,"mtime":1611676342633,"results":"57","hashOfConfig":"35"},{"size":3031,"mtime":1611852736706,"results":"58","hashOfConfig":"35"},{"size":6399,"mtime":1612370918100,"results":"59","hashOfConfig":"35"},{"size":2641,"mtime":1612078946158,"results":"60","hashOfConfig":"35"},{"size":1462,"mtime":1612029668976,"results":"61","hashOfConfig":"35"},{"size":1398,"mtime":1612030621276,"results":"62","hashOfConfig":"35"},{"size":4457,"mtime":1612111759569,"results":"63","hashOfConfig":"35"},{"size":2374,"mtime":1612368302841,"results":"64","hashOfConfig":"35"},{"size":804,"mtime":1612368249832,"results":"65","hashOfConfig":"35"},{"size":3341,"mtime":1612367933951,"results":"66","hashOfConfig":"35"},{"size":5130,"mtime":1612361094129,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"v2bjgv",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},"D:\\Portfolio\\MaxMMA\\frontend\\src\\index.js",[],["138","139"],"D:\\Portfolio\\MaxMMA\\frontend\\src\\App.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Header.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Footer.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\HomeScreen.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Product.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Rating.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\ProductScreen.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\store.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\reducers\\productReducers.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\constants\\productConstants.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\actions\\productActions.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Loader.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\Message.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\CartScreen.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\reducers\\cartReducers.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\constants\\cartConstants.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\actions\\cartActions.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\reducers\\userReducers.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\constants\\userConstants.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\LoginScreen.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\actions\\userActions.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\FormContainer.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\RegisterScreen.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\ProfileScreen.js",["140"],"import React, { useState, useEffect } from \"react\"\r\nimport { Form, Button, Row, Col, Table } from \"react-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getUserDetails, upadateUserProfile } from \"../actions/userActions\"\r\nimport Loader from \"../components/Loader\"\r\nimport Message from \"../components/Message\"\r\nimport { getMyOrderList } from \"../actions/orderActions\"\r\nimport { LinkContainer } from \"react-router-bootstrap\"\r\n\r\nconst ProfileScreen = ({ history }) => {\r\n  const [name, setName] = useState(\"\")\r\n  const [email, setEmail] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n  const [newPassword, setNewPassword] = useState(\"\")\r\n  const [confirmNewPassword, setConfirmNewPassword] = useState(\"\")\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const updateProfile = useSelector((state) => state.updateProfile)\r\n  const { success, error: updatedError } = updateProfile\r\n\r\n  const myOrderList = useSelector((state) => state.getMyOrderList)\r\n  const { loading: loadingOrders, error: errorOrders, orders } = myOrderList\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push(\"/login\")\r\n    } else {\r\n      if (!user || success || !user.name) {\r\n        dispatch(getUserDetails())\r\n        dispatch(getMyOrderList())\r\n      } else {\r\n        setName(userInfo.name)\r\n        setEmail(userInfo.email)\r\n      }\r\n    }\r\n  }, [userInfo, dispatch, user, history])\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault()\r\n    console.log(updatedError)\r\n    if (newPassword !== confirmNewPassword) {\r\n      setMessage(\"新密碼與確認密碼不相同\")\r\n    } else {\r\n      dispatch(\r\n        upadateUserProfile({\r\n          _id: user._id,\r\n          name: name,\r\n          email: email,\r\n          password: password,\r\n        })\r\n      )\r\n\r\n      dispatch(getUserDetails())\r\n    }\r\n  }\r\n  return (\r\n    <Row>\r\n      <Col md={4}>\r\n        <h1>會員資料</h1>\r\n        {message && <Message variant=\"danger\">{message}</Message>}\r\n        {error && <Message variant=\"danger\">{error}</Message>}\r\n        {updatedError && <Message variant=\"danger\">{updatedError}</Message>}\r\n        {success && <Message>資料更新成功</Message>}\r\n        {loading && <Loader />}\r\n        <Form className=\"my-3\" onSubmit={submitHandler}>\r\n          <Form.Group>\r\n            <Form.Label>使用者名稱</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(event) => setName(event.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Form.Label>信箱</Form.Label>\r\n            <Form.Control\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(event) => setEmail(event.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Form.Label>密碼</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(event) => setPassword(event.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>新密碼</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              value={newPassword}\r\n              onChange={(event) => setNewPassword(event.target.value)}\r\n            ></Form.Control>\r\n            <Form.Text className=\"text-muted\">\r\n              若無須更改密碼請保留空白\r\n            </Form.Text>\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Form.Label>再次輸入新密碼</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              value={confirmNewPassword}\r\n              onChange={(event) => setConfirmNewPassword(event.target.value)}\r\n            ></Form.Control>\r\n            <Form.Text className=\"text-muted\">\r\n              若無須更改密碼請保留空白\r\n            </Form.Text>\r\n          </Form.Group>\r\n          <Button type=\"submit\">更改</Button>\r\n        </Form>\r\n      </Col>\r\n      <Col md={8}>\r\n        <h1>我的購物清單</h1>\r\n        <Table\r\n          bordered\r\n          striped\r\n          hover\r\n          responsive\r\n          size=\"sm\"\r\n          className=\"text-center\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>建立日期</th>\r\n              <th>總金額</th>\r\n              <th>付款</th>\r\n              <th>出貨</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {loadingOrders ? (\r\n              <Loader />\r\n            ) : errorOrders ? (\r\n              <Message variant=\"danger\">{errorOrders}</Message>\r\n            ) : (\r\n              orders.map((order) => {\r\n                return (\r\n                  <tr key={order._id}>\r\n                    <th>{order._id}</th>\r\n                    <th>{order.createdAt.substring(0, 10)}</th>\r\n                    <th>{order.totalPrice}</th>\r\n                    <th>\r\n                      {order.isPaid ? (\r\n                        order.paidAt.substring(0, 10)\r\n                      ) : (\r\n                        <i\r\n                          className=\"fas fa-times\"\r\n                          style={{ color: \"red\" }}\r\n                        ></i>\r\n                      )}\r\n                    </th>\r\n                    <th>\r\n                      {order.isDelivered ? (\r\n                        order.deliveredAt.substring(0, 10)\r\n                      ) : (\r\n                        <i\r\n                          className=\"fas fa-times\"\r\n                          style={{ color: \"red\" }}\r\n                        ></i>\r\n                      )}\r\n                    </th>\r\n\r\n                    <th>\r\n                      <LinkContainer to={`/orders/${order._id}`}>\r\n                        <Button className=\"btn-sm btn-light\">詳情</Button>\r\n                      </LinkContainer>\r\n                    </th>\r\n                  </tr>\r\n                )\r\n              })\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ProfileScreen\r\n","D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\ShippingScreen.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\components\\CheckoutSteps.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\PaymentScreen.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\PlaceOrderScreen.js",["141"],"import React, { useEffect } from \"react\"\r\nimport { Row, Col, Container, ListGroup, Image, Button } from \"react-bootstrap\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport CheckoutSteps from \"../components/CheckoutSteps\"\r\nimport Message from \"../components/Message\"\r\nimport { addOrderItems } from \"../actions/orderActions\"\r\n\r\nconst PlaceOrderScreen = ({ history }) => {\r\n  const cart = useSelector((state) => state.cart)\r\n  const dispatch = useDispatch()\r\n  const { cartItems, shippingAddress, paymentMethod } = cart\r\n\r\n  //Calculation\r\n  cart.itemsPrice = cartItems.reduce(\r\n    (acc, item) => acc + item.price * item.qty,\r\n    0\r\n  )\r\n\r\n  cart.shippingPrice = Math.round(cart.itemsPrice > 3000 ? 0 : 100)\r\n  cart.taxPrice = Math.round(cart.itemsPrice * 0.02)\r\n  cart.totalPrice = Math.round(\r\n    cart.itemsPrice + cart.shippingPrice + cart.taxPrice\r\n  )\r\n\r\n  const addOrder = useSelector((state) => state.addOrder)\r\n  const { loading, error, success, orderItems } = addOrder\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      history.push(`/orders/${orderItems._id}`)\r\n    }\r\n  }, [history, orderItems, success])\r\n  const placeOrderHandler = () => {\r\n    dispatch(\r\n      addOrderItems({\r\n        orderItems: cart.cartItems,\r\n        shippingAddress: cart.shippingAddress,\r\n        paymentMethod: cart.paymentMethod,\r\n        shippingPrice: cart.shippingPrice,\r\n        itemPrice: cart.itemsPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n    )\r\n  }\r\n  return (\r\n    <Container>\r\n      <CheckoutSteps step1 step2 step3 step4 />\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant=\"flush\">\r\n            <ListGroup.Item>\r\n              <h4>寄送</h4>\r\n              <p>\r\n                {\" \"}\r\n                <strong>地址:</strong>\r\n                {shippingAddress.postalCode},{shippingAddress.country}{\" \"}\r\n                {shippingAddress.city}\r\n                {shippingAddress.address}\r\n              </p>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <h4>付款</h4>\r\n              <p>\r\n                <strong>付款方式:</strong>\r\n                {paymentMethod}\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h4>購物清單</h4>\r\n              {cartItems.length === 0 && (\r\n                <Message>\r\n                  您的購物車是空的 <Link to=\"/\">回首頁?</Link>\r\n                </Message>\r\n              )}\r\n              <ListGroup variant=\"flush\">\r\n                {cartItems.map((item) => {\r\n                  return (\r\n                    <ListGroup.Item>\r\n                      <Row>\r\n                        <Col md={2}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                          <Link to={`/products/${item.product_id}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col md={3}>\r\n                          ${item.price} X {item.qty}\r\n                        </Col>\r\n                        <Col md={3}>${item.price * item.qty}</Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  )\r\n                })}\r\n              </ListGroup>\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n\r\n        <Col md={4}>\r\n          <ListGroup>\r\n            <h4>訂單總結</h4>\r\n            <ListGroup.Item>商品:${cart.itemsPrice} </ListGroup.Item>\r\n            <ListGroup.Item>運費:$ {cart.shippingPrice}</ListGroup.Item>\r\n            <ListGroup.Item>稅金:$ {cart.taxPrice}</ListGroup.Item>\r\n            <ListGroup.Item>總計:$ {cart.totalPrice}</ListGroup.Item>\r\n            <ListGroup.Item>\r\n              {error && <Message variant=\"danger\">{error}</Message>}\r\n              <Button\r\n                type=\"button\"\r\n                className=\"btn-block\"\r\n                onClick={placeOrderHandler}\r\n              >\r\n                結帳\r\n              </Button>\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","D:\\Portfolio\\MaxMMA\\frontend\\src\\reducers\\orderReducers.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\constants\\orderConstants.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\actions\\orderActions.js",[],"D:\\Portfolio\\MaxMMA\\frontend\\src\\screens\\OrderScreen.js",["142","143"],"import React, { useState, useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport Message from \"../components/Message\"\r\nimport Loader from \"../components/Loader\"\r\nimport { Container, ListGroup, Row, Col, Image } from \"react-bootstrap\"\r\nimport { getOrderDetails, getOrderPay } from \"../actions/orderActions\"\r\nimport { ORDER_PAY_RESET } from \"../constants/orderConstants\"\r\nimport axios from \"axios\"\r\nimport { PayPalButton } from \"react-paypal-button-v2\"\r\n\r\nconst OrderScreen = ({ match }) => {\r\n  const orderId = match.params.id\r\n  const dispatch = useDispatch()\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { loading, error, order } = orderDetails\r\n\r\n  const orderPay = useSelector((state) => state.getOrderPay)\r\n  const { loading: loadingPay, error: errorPay, success: successPay } = orderPay\r\n  const [sdkReady, setSdkReady] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const addPayPal = async () => {\r\n      const { data: clientId } = await axios.get(\"/api/config/paypal\")\r\n      const script = document.createElement(\"script\")\r\n      script.type = \"text/javascript\"\r\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n      script.async = true\r\n      script.onload = () => {\r\n        setSdkReady(true)\r\n      }\r\n      document.body.appendChild(script)\r\n    }\r\n    console.log(window.paypal)\r\n    addPayPal()\r\n\r\n    if (!order || successPay) {\r\n      dispatch(getOrderDetails(orderId))\r\n      dispatch({ type: ORDER_PAY_RESET })\r\n    } else if (!order.isPaid) {\r\n      if (!window.paypal) {\r\n        addPayPal()\r\n      } else {\r\n        setSdkReady(true)\r\n      }\r\n    }\r\n  }, [orderId, dispatch])\r\n\r\n  const onSuccessHandler = (paymentResult) => {\r\n    dispatch(getOrderPay(orderId, paymentResult))\r\n  }\r\n  return (\r\n    <Container>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant=\"danger\">{error}</Message>\r\n      ) : (\r\n        <Row>\r\n          <Col md={8}>\r\n            <h1>訂單編號:</h1>\r\n            <h4>{order._id}</h4>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <h4>配送資訊</h4>\r\n                <p>\r\n                  <strong>姓名:</strong> {order.user.name}\r\n                </p>\r\n                <p>\r\n                  <strong>信箱:</strong> {order.user.email}\r\n                </p>\r\n                <p>\r\n                  <strong>地址:</strong> {order.shippingAddress.address}\r\n                </p>\r\n                {order.isDeliver ? (\r\n                  <Message>已於 {order.deliverAt} 出貨</Message>\r\n                ) : (\r\n                  <Message variant=\"danger\">尚未出貨</Message>\r\n                )}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <h4>付款</h4>\r\n                <p>\r\n                  <strong>付款方式:</strong>\r\n                  {order.paymentMethod}\r\n                </p>\r\n\r\n                {order.isPaid ? (\r\n                  <Message>已於 {order.paidAt} 付款</Message>\r\n                ) : (\r\n                  <Message variant=\"danger\">尚未付款</Message>\r\n                )}\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item>\r\n                <h4>購物清單</h4>\r\n\r\n                <ListGroup variant=\"flush\">\r\n                  {order.orderItems.map((item) => {\r\n                    return (\r\n                      <ListGroup.Item key={item._id}>\r\n                        <Row>\r\n                          <Col md={2}>\r\n                            <Image src={item.image} alt={item.name} fluid />\r\n                          </Col>\r\n                          <Col md={5}>{item.name}</Col>\r\n                          <Col md={5}>\r\n                            $ {item.price} X {item.qty} = ${\" \"}\r\n                            {item.price * item.qty}\r\n                          </Col>\r\n                        </Row>\r\n                      </ListGroup.Item>\r\n                    )\r\n                  })}\r\n                </ListGroup>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n\r\n          <Col md={4}>\r\n            <ListGroup>\r\n              <h4>訂單總結</h4>\r\n              <ListGroup.Item>商品:$ {order.itemPrice}</ListGroup.Item>\r\n              <ListGroup.Item>運費:$ {order.shippingPrice}</ListGroup.Item>\r\n              <ListGroup.Item>稅金:$ {order.taxPrice}</ListGroup.Item>\r\n              <ListGroup.Item>總計:$ {order.totalPrice}</ListGroup.Item>\r\n              {!order.isPaid && (\r\n                <ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {!sdkReady ? (\r\n                    <Loader />\r\n                  ) : (\r\n                    <PayPalButton\r\n                      amount={order.totalPrice}\r\n                      onSuccess={onSuccessHandler}\r\n                      currency=\"TWD\"\r\n                    ></PayPalButton>\r\n                  )}\r\n                </ListGroup.Item>\r\n              )}\r\n            </ListGroup>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default OrderScreen\r\n",{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":44,"column":6,"nodeType":"150","endLine":44,"endColumn":41,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":27,"column":11,"nodeType":"154","messageId":"155","endLine":27,"endColumn":18},{"ruleId":"152","severity":1,"message":"156","line":18,"column":39,"nodeType":"154","messageId":"155","endLine":18,"endColumn":47},{"ruleId":"148","severity":1,"message":"157","line":46,"column":6,"nodeType":"150","endLine":46,"endColumn":25,"suggestions":"158"},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'success'. Either include it or remove the dependency array.","ArrayExpression",["161"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'errorPay' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'order' and 'successPay'. Either include them or remove the dependency array.",["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [userInfo, dispatch, user, history, success]",{"range":"167","text":"168"},"Update the dependencies array to be: [orderId, dispatch, order, successPay]",{"range":"169","text":"170"},[1630,1665],"[userInfo, dispatch, user, history, success]",[1667,1686],"[orderId, dispatch, order, successPay]"]